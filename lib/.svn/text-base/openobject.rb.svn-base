require 'fattr'

class OpenObject
  VERSION = '0.0.3' unless defined? OpenObject::VERSION
  def self.version() OpenObject::VERSION end

  alias_method "__inspect__", "inspect"
  alias_method "__to_s__", "to_s"
  alias_method "__instance_eval__", "instance_eval"

    instance_methods.each{|m| undef_method m unless m[%r/__/]}

  alias_method "instance_eval", "__instance_eval__"
  alias_method "inspect", "__inspect__"
  alias_method "to_s", "__to_s__"

  def method_missing m, *a, &b
    if(a.empty? and b.nil?)
      return((
        if defined?(@default)
          value = @default.respond_to?(:call) ? @default.call : @default
          __fattr__ m => value
          value
        else
          super
        end
      ))
    end
    m = m.to_s
    setter = m.delete!('=') || a.first || b
    if setter
      if a.empty?
        __fattr__ m, &b
      else
        __fattr__ m => a.shift
      end
    else
      nil
    end
  end

  def default *value, &block
    @default = (( value.empty? ? block : value.first ))
  end

  def configure kvs = {}, &b
    kvs.each{|k,v| __fattr__ k => v}
    __instance_eval__ &b if b
  end
  alias_method "initialize", "configure"
  alias_method "eval", "configure"

  def __singleton_class__ &b
    sc =
      class << self
        self
      end
    b ? sc.module_eval(&b) : sc
  end
  alias_method "singleton_class", "__singleton_class__"

  def extend *a, &b
    if b
      __singleton_class__ &b
      self
    else
      super
    end
  end
  alias_method "extending", "extend"

  def fattrs *a, &b
    __fattrs__ *a, &b
  end
  alias_method "fattr", "fattrs"

  def to_hash
    __fattrs__.inject(Hash.new){|h,a| h.update a => __send__(a)}
  end
  alias_method "to_h", "to_hash"

  def as_query
    require 'cgi'
    e = lambda{|x| CGI.escape x.to_s}
    to_hash.map{|k,v| "#{ e[k] }=#{ e[v] }"}.join("&")
  end

  def respond_to? *a, &b
    true
  end
end

class Object
  def Open *a, &b
    OpenObject.new(*a, &b)
  end
  def openobject(*a, &b)
    OpenObject.new(*a, &b)
  end
  def oo *a, &b
    OpenObject.new(*a, &b)
  end
end
